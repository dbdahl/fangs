// Generated by the cargo::prebuild() function. Do not edit by hand.

// If usage of .Call() and .Kall() functions in the package's R code changes,
// update this file by rerunning "cargo::prebuild(DIR)", where DIR is the root
// directory of this package.

/*
// Below is skeleton code that you can copy to your "src/rust/src/lib.rs" file
// and then uncomment. You can freely change the body and arguments names, but
// changing the name of a function or the number of arguments necessitates:
// 1. a corresponding change to invocations of .Call() and .Kall() in the R code
// and 2. rerunning cargo::prebuild().

mod registration;
use roxido::*;

#[roxido]
fn compute_expected_loss(Z: Rval, samples: Rval, a: Rval, nCores: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn compute_loss_augmented(Z1: Rval, Z2: Rval, a: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn compute_loss(Z1: Rval, Z2: Rval, a: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn compute_loss_permutations(Z1: Rval, Z2: Rval, a: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn fangs_old(samples: Rval, nIterations: Rval, nInit: Rval, nSweet: Rval, a: Rval, nCores: Rval, quiet: Rval) -> Rval {
    Rval::nil()
}

#[roxido]
fn fangs(samples: Rval, nIterations: Rval, maxSeconds: Rval, nInit: Rval, nSweet: Rval, a: Rval, nCores: Rval, quiet: Rval) -> Rval {
    Rval::nil()
}
*/

use roxido::*;

#[no_mangle]
extern "C" fn R_init_fangs_rust(info: *mut rbindings::DllInfo) {
    let mut call_routines = Vec::with_capacity(6);
    let mut _names: Vec<std::ffi::CString> = Vec::with_capacity(6);
    _names.push(std::ffi::CString::new(".compute_expected_loss").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::compute_expected_loss as *const u8) },
        numArgs: 4,
    });
    _names.push(std::ffi::CString::new(".compute_loss_augmented").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::compute_loss_augmented as *const u8) },
        numArgs: 3,
    });
    _names.push(std::ffi::CString::new(".compute_loss").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::compute_loss as *const u8) },
        numArgs: 3,
    });
    _names.push(std::ffi::CString::new(".compute_loss_permutations").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::compute_loss_permutations as *const u8) },
        numArgs: 3,
    });
    _names.push(std::ffi::CString::new(".fangs_old").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::fangs_old as *const u8) },
        numArgs: 7,
    });
    _names.push(std::ffi::CString::new(".fangs").unwrap());
    call_routines.push(rbindings::R_CallMethodDef {
        name: _names.last().unwrap().as_ptr(),
        fun: unsafe { std::mem::transmute(crate::fangs as *const u8) },
        numArgs: 8,
    });
    call_routines.push(rbindings::R_CallMethodDef {
        name: std::ptr::null(),
        fun: None,
        numArgs: 0,
    });
    unsafe {
        rbindings::R_registerRoutines(
            info,
            std::ptr::null(),
            call_routines.as_ptr(),
            std::ptr::null(),
            std::ptr::null(),
        );
        rbindings::R_useDynamicSymbols(info, 0);
        rbindings::R_forceSymbols(info, 1);
    }
    roxido::r::set_custom_panic_hook();
}

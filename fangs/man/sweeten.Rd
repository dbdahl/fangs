% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sweeten.R
\name{sweeten}
\alias{sweeten}
\title{Sweeten Feature Allocations}
\usage{
sweeten(candidates, samples, nIterations = 1000, nCores = 0, quiet = FALSE)
}
\arguments{
\item{candidates}{An object of class \sQuote{list} containing features allocations to sweeten.  Each list element encodes one
feature allocation as a binary matrix, with items in the rows and features
in the columns.}

\item{samples}{An object of class \sQuote{list} containing posterior samples
from a feature allocation distribution. Each list element encodes one
feature allocation as a binary matrix, with items in the rows and features
in the columns.}

\item{nIterations}{The number of iterations (i.e., proposed changes) to
consider per draw in the sweetening phase.}

\item{nCores}{The number of CPU cores to use, i.e., the number of
simultaneous calculations at any given time. A value of zero indicates to
use all cores on the system.}

\item{quiet}{If \code{TRUE}, intermediate status reporting is suppressed.}
}
\value{
A list with the following elements:
\itemize{
\item estimate - The feature allocation point estimate in binary matrix form.
\item loss - The estimated expected FARO loss of the point estimate.
\item iteration - The iteration number (out of \code{nIterations}) at which the point estimate was found.
\item secondsSweetening - The elapsed time in the sweetening phrase.
\item whichBest - The proposal number (out of \code{nBests}) from which the point estimate was found.
}
}
\description{
An implementation of the sweetening phrase of the feature allocation greedy search algorithm is
provided.
}
\examples{
# To reduce load on CRAN testing servers, limit the number of iterations.
data(samplesFA)
# R_CARGO \dontrun{
# R_CARGO # Example disabled since Cargo was not found when installing from source package.
# R_CARGO # You can still run the example if you install Cargo. Hint: cargo::install().
sweeten(samplesFA[1:3], samplesFA, nIterations=100, nCores=2)
# R_CARGO }

}
